"""
Checkers implemented with pygame
"""
import os
import pygame as pg
import checkersoop as ch


class Game():
    """
    Pulls shit from checkersoop and reformats for pygame based gui
    """

    def __init__(self, turn):
        pg.init()
        self.size = (600, 600)
        self.fps = 60
        self.screen = pg.display.set_mode(
            self.size, pg.DOUBLEBUF)

        self.surfaces = {
            "bg": pg.image.load(os.path.join(".", "checkerboard.gif")).convert(),
            "red": pg.Surface((75, 75)),
            "black": pg.Surface((75, 75)),
            "hl": pg.Surface((75, 75))
        }
        self.fill()

        self.checkers = ch.Game(turn)
        self.clock = pg.time.Clock()
        self.cursor = [0, 0, 0]

    def fill(self):
        """
        Fills in surfaces with needed drawings
        """
        # for red
        pg.draw.circle(self.surfaces["red"], (1, 1, 1), (37, 37), 30)
        pg.draw.circle(self.surfaces["red"], (255, 0, 0), (37, 37), 28)
        pg.draw.circle(self.surfaces["red"], (1, 1, 1), (37, 37), 18, 1)
        # for black
        pg.draw.circle(self.surfaces["black"],
                       (255, 255, 255), (37, 37), 30, 1)
        pg.draw.circle(self.surfaces["black"], (1, 1, 1), (37, 37), 28)
        pg.draw.circle(self.surfaces["black"],
                       (255, 255, 255), (37, 37), 18, 1)
        # highlighter
        pg.draw.rect(self.surfaces["hl"], (0, 255, 0), (0, 0, 75, 75), 2)

    def draw(self):
        """
        Most of the drawing
        """
        self.screen.blit(self.surfaces["bg"], (0, 0))
        self.screen.blit(self.surfaces["hl"],
                         (self.cursor[0]*75, self.cursor[1]*75))
        for i in range(1, 72):
            if i % 9:
                if self.checkers.board.filledby(i) == 'r':
                    self.screen.blit(
                        self.surfaces["red"], ((i-1) % 9*75, i//9*75))
                elif self.checkers.board.filledby(i) == 'b':
                    self.screen.blit(
                        self.surfaces["black"], ((i-1) % 9*75, i//9*75))
        pg.display.flip()

    def move(self, keys):
        """
        Moves cursor and lets user pick piece

        Arguments:
            keys {list} -- list generated by pygame.key.get_pressed
        """

        if keys[pg.K_w]:
            if self.cursor[1] > 0:
                self.cursor[1] -= 1
            else:
                self.cursor[1] = 7
        elif keys[pg.K_s]:
            if self.cursor[1] < 7:
                self.cursor[1] += 1
            else:
                self.cursor[1] = 0
        elif keys[pg.K_a]:
            if self.cursor[0] > 0:
                self.cursor[0] -= 1
            else:
                self.cursor[0] = 7
        elif keys[pg.K_d]:
            if self.cursor[0] < 7:
                self.cursor[0] += 1
            else:
                self.cursor[0] = 0
        elif keys[pg.K_KP_ENTER]:
            pos = self.cursor[0]+self.cursor[1]*9 + 1
            if self.checkers.board.getpiece(pos) != '.':
                pass
        self.draw()

    def run(self):
        """
        Main loop
        """
        running = True
        # only really need to draw board once
        self.draw()
        while running and self.checkers.winner() == 'n':
            for event in pg.event.get():
                if event.type == pg.QUIT:
                    running = False
                elif event.type == pg.KEYDOWN:
                    if event.key == pg.K_ESCAPE:
                        running = False
                    else:
                        break
            self.move(pg.key.get_pressed())
            self.clock.tick(self.fps//5)
            # need to draw then move
            # also mouse input?

        pg.display.quit()
        pg.quit()


if __name__ == "__main__":
    game = Game('b')
    game.run()
